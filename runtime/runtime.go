// Package runtime contains the Runtime of the Vulcan security Checks.
// [Vulcan security checks]: https://github.com/adevinta/vulcan-checks
package runtime

import (
	"context"
	"errors"
	"time"

	report "github.com/adevinta/vulcan-report"
)

// RunState is written to the [Progress.Progress] channel to update the progress
// of the execution of a [Check].
type RunState struct {
	Running  time.Duration
	State    State
	Progress float32
}

// Result is returned by the [Progress.Result] method to get the result of the
// execution of [Check].
type Result struct {
	// FinalState contains the final state of the execution of a Check. It can
	// be nil if an unexpected error occurred while running the check. A call to
	// [States.IsTerminal] will always return true for this State.
	FinalState *State
	// Report contains the report generated by a [Check] that run correctly.
	Report *report.Report
	// Logs contain the logs gathered from running the container of a [Check],
	// it can be nil if the runtime was unable to start running the [Check].
	Logs []byte
}

// Progress is returned by the [Runtime.Run] method to track the execution of a
// Check.
type Progress struct{}

// States returns a channel to be read to gather the intermediate states that a
// [Check] goes through while running. When [States] is closed, the Check has
// finished running, and any call to the method [Result] is warranteed to not
// block and return the final result of the execution.
func (p Progress) States() chan<- RunState {
	panic("not implemented")
}

// Result returns the result of the execution of a [Check] launch by the
// [Runtime.Run] method. If the channel returned by [Progress.States] is not
// closed it will block until it is. Even if it returns an error, the field
// [Result.Logs] can contain some logs.
func (p Progress) Result() (Result, error) {
	return Result{}, errors.New("not implemented")
}

// Runtime allows to run Checks.
type Runtime struct {
}

// Default returns the default Runtime.
func Default() *Runtime {
	panic("not implemented")
}

// Run runs a [Check], the execution of the check can be aborted through the
// given context. See [Progress] for information about how to track the
// execution.
func (r *Runtime) Run(ctx context.Context, c Check) (Progress, error) {
	return Progress{}, errors.New("not implemented")
}
